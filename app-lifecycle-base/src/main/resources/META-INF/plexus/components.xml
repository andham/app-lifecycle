<!--
 * Sonatype Application Build Lifecycle
 * Copyright (C) 2009 Sonatype, Inc.                                                                                                                          
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 -->
<component-set>
  <components>
    <component>
      <!-- Based on the 'jar' lifecycle mapping at:
           http://svn.apache.org/repos/asf/maven/tags/maven-2.2.0/maven-core/src/main/resources/META-INF/plexus/components.xml
      -->
      <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>
      <role-hint>abstract-plugin</role-hint>
      <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation>
      <description>
        Abstract lifecycle mapping for an application plugin build. These plugins all build in basically
        the same way, are assembled the same way for installation in the applicatin, and share a
        common plugin descriptor format. Therefore, the only thing we need to do for new applications
        supporting this sort of plugin system is alias this abstract mapping using 
        org.sonatype.maven.plugin.app.DelegatingLifecyleMapping.
      </description>
      <configuration>
        <lifecycles>
          <lifecycle>
            <id>default</id>
            <phases>
              <!-- Sonatype app-specific steps: 
               |
               |     1. verify that all app dependencies in this project have their scope set to 'provided'
               -->
              <initialize>
                org.sonatype.plugins:app-lifecycle-maven-plugin:${project.version}:check-dependencies
              </initialize>
              
              <process-resources>org.apache.maven.plugins:maven-resources-plugin:2.4:resources</process-resources>
              <compile>org.apache.maven.plugins:maven-compiler-plugin:2.0.2:compile</compile>
              
              <!-- Sonatype app-specific step: generate the plugin descriptor. -->
              <process-classes>org.sonatype.plugins:app-lifecycle-maven-plugin:${project.version}:generate-metadata</process-classes>
              
              <process-test-resources>org.apache.maven.plugins:maven-resources-plugin:2.4:testResources</process-test-resources>
              <test-compile>org.apache.maven.plugins:maven-compiler-plugin:2.0.2:testCompile</test-compile>
              <test>org.apache.maven.plugins:maven-surefire-plugin:2.5:test</test>

              <package>org.apache.maven.plugins:maven-jar-plugin:2.2:jar</package>
              
              <!-- Sonatype app-specific step inside: create a bundle for dropping into an existing application instance -->
              <integration-test>org.sonatype.plugins:app-lifecycle-maven-plugin:${project.version}:create-bundle</integration-test>
              
              <install>org.apache.maven.plugins:maven-install-plugin:2.2:install</install>
              <deploy>org.apache.maven.plugins:maven-deploy-plugin:2.4:deploy</deploy>
            </phases>
          </lifecycle>
        </lifecycles>
      </configuration>
    </component>
  </components>
</component-set>